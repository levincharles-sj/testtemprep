import software.amazon.awssdk.auth.credentials.SystemPropertyCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.cognitoidentityprovider.CognitoIdentityProviderClient;
import software.amazon.awssdk.services.cognitoidentityprovider.model.*;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.text.SimpleDateFormat;
import java.util.*;

public class CognitoSRPAuth {
    
    private static final String HMAC_SHA256_ALGORITHM = "HmacSHA256";
    private static final BigInteger N = new BigInteger(
        "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1" +
        "29024E088A67CC74020BBEA63B139B22514A08798E3404DD" +
        "EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245" +
        "E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED" +
        "EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D" +
        "C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F" +
        "83655D23DCA3AD961C62F356208552BB9ED529077096966D" +
        "670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B" +
        "E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9" +
        "DE2BCBF6955817183995497CEA956AE515D2261898FA0510" +
        "15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64" +
        "ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7" +
        "ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B" +
        "F12FFA06D98A0864D87602733EC86A64521F2B18177B200C" +
        "BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31" +
        "43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF", 16);
    private static final BigInteger G = BigInteger.valueOf(2);
    private static final BigInteger K;
    
    static {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(N.toByteArray());
            md.update(G.toByteArray());
            K = new BigInteger(1, md.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    
    private final CognitoIdentityProviderClient cognitoClient;
    private final String clientId;
    private final String userPoolId;
    
    public CognitoSRPAuth(String region, String clientId, String userPoolId) {
        this.cognitoClient = CognitoIdentityProviderClient.builder()
                .region(Region.of(region))
                .credentialsProvider(SystemPropertyCredentialsProvider.create())
                .build();
        this.clientId = clientId;
        this.userPoolId = userPoolId;
    }
    
    public AuthenticationResultType authenticate(String username, String password) 
            throws Exception {
        
        // Step 1: Generate SRP A value
        BigInteger a = generateRandomBigInteger();
        BigInteger A = G.modPow(a, N);
        
        // Step 2: Initiate auth with SRP_A
        InitiateAuthRequest initiateAuthRequest = InitiateAuthRequest.builder()
                .authFlow(AuthFlowType.USER_SRP_AUTH)
                .clientId(clientId)
                .authParameters(Map.of(
                    "USERNAME", username,
                    "SRP_A", A.toString(16)
                ))
                .build();
        
        InitiateAuthResponse initiateAuthResponse = cognitoClient.initiateAuth(initiateAuthRequest);
        
        if (initiateAuthResponse.challengeName() != ChallengeNameType.PASSWORD_VERIFIER) {
            throw new RuntimeException("Expected PASSWORD_VERIFIER challenge, got: " + 
                                     initiateAuthResponse.challengeName());
        }
        
        // Step 3: Handle PASSWORD_VERIFIER challenge
        Map<String, String> challengeParameters = initiateAuthResponse.challengeParameters();
        String userId = challengeParameters.get("USER_ID_FOR_SRP");
        String saltHex = challengeParameters.get("SALT");
        String srpBHex = challengeParameters.get("SRP_B");
        String secretBlock = challengeParameters.get("SECRET_BLOCK");
        
        BigInteger salt = new BigInteger(saltHex, 16);
        BigInteger B = new BigInteger(srpBHex, 16);
        
        // Step 4: Calculate password verifier
        String timestamp = getTimestamp();
        String passwordVerifier = calculatePasswordVerifier(
            userPoolId, userId, password, a, A, B, salt, secretBlock, timestamp);
        
        // Step 5: Respond to auth challenge
        RespondToAuthChallengeRequest respondRequest = RespondToAuthChallengeRequest.builder()
                .challengeName(ChallengeNameType.PASSWORD_VERIFIER)
                .clientId(clientId)
                .session(initiateAuthResponse.session())
                .challengeResponses(Map.of(
                    "PASSWORD_CLAIM_SIGNATURE", passwordVerifier,
                    "PASSWORD_CLAIM_SECRET_BLOCK", secretBlock,
                    "TIMESTAMP", timestamp,
                    "USERNAME", userId
                ))
                .build();
        
        RespondToAuthChallengeResponse respondResponse = 
            cognitoClient.respondToAuthChallenge(respondRequest);
        
        return respondResponse.authenticationResult();
    }
    
    private String calculatePasswordVerifier(String userPoolId, String userId, String password,
                                           BigInteger a, BigInteger A, BigInteger B, BigInteger salt,
                                           String secretBlock, String timestamp) throws Exception {
        
        // Calculate u = H(A, B)
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(A.toByteArray());
        md.update(B.toByteArray());
        BigInteger u = new BigInteger(1, md.digest());
        
        if (u.equals(BigInteger.ZERO)) {
            throw new RuntimeException("u cannot be zero");
        }
        
        // Calculate x = H(salt, H(poolId, userId, ":", password))
        String userIdPassword = userPoolId + userId + ":" + password;
        byte[] userIdPasswordHash = MessageDigest.getInstance("SHA-256")
                .digest(userIdPassword.getBytes(StandardCharsets.UTF_8));
        
        md = MessageDigest.getInstance("SHA-256");
        md.update(salt.toByteArray());
        md.update(userIdPasswordHash);
        BigInteger x = new BigInteger(1, md.digest());
        
        // Calculate S = (B - k * g^x) ^ (a + u * x) % N
        BigInteger gx = G.modPow(x, N);
        BigInteger kgx = K.multiply(gx).mod(N);
        BigInteger diff = B.subtract(kgx).mod(N);
        BigInteger ux = u.multiply(x);
        BigInteger aux = a.add(ux);
        BigInteger S = diff.modPow(aux, N);
        
        // Calculate K = H(S)
        byte[] sBytes = S.toByteArray();
        byte[] K_bytes = MessageDigest.getInstance("SHA-256").digest(sBytes);
        
        // Calculate signature
        Mac mac = Mac.getInstance(HMAC_SHA256_ALGORITHM);
        mac.init(new SecretKeySpec(K_bytes, HMAC_SHA256_ALGORITHM));
        mac.update(userPoolId.getBytes(StandardCharsets.UTF_8));
        mac.update(userId.getBytes(StandardCharsets.UTF_8));
        mac.update(Base64.getDecoder().decode(secretBlock));
        mac.update(timestamp.getBytes(StandardCharsets.UTF_8));
        
        byte[] signature = mac.doFinal();
        return Base64.getEncoder().encodeToString(signature);
    }
    
    private BigInteger generateRandomBigInteger() {
        SecureRandom random = new SecureRandom();
        byte[] bytes = new byte[128];
        random.nextBytes(bytes);
        return new BigInteger(1, bytes);
    }
    
    private String getTimestamp() {
        SimpleDateFormat sdf = new SimpleDateFormat("EEE MMM d HH:mm:ss 'UTC' yyyy", Locale.US);
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        return sdf.format(new Date());
    }
    
    public void close() {
        cognitoClient.close();
    }
    
    // Usage example
    public static void main(String[] args) {
        try {
            CognitoSRPAuth auth = new CognitoSRPAuth(
                "us-east-1",           // region
                "your-client-id",      // clientId
                "your-user-pool-id"    // userPoolId
            );
            
            AuthenticationResultType result = auth.authenticate(
                "your-username",       // username
                "your-password"        // password
            );
            
            System.out.println("Access Token: " + result.accessToken());
            System.out.println("ID Token: " + result.idToken());
            System.out.println("Refresh Token: " + result.refreshToken());
            
            auth.close();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}