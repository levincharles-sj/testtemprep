import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Map;

public class ExcelReportGenerator {
    
    private static final IndexedColors LIGHT_BLUE = IndexedColors.PALE_BLUE;
    private static final IndexedColors LIGHT_GREEN = IndexedColors.LIGHT_GREEN;
    private static final IndexedColors PASS_GREEN = IndexedColors.GREEN;
    private static final IndexedColors FAIL_RED = IndexedColors.RED;
    
    public void generateInitialReport(String fileName, Map<String, Object[]> data, String tableTitle) {
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Sheet1");
            setupColumnWidths(sheet);
            createTable(workbook, sheet, data, tableTitle, 0);
            
            try (FileOutputStream fileOut = new FileOutputStream(fileName)) {
                workbook.write(fileOut);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void appendTableToExistingReport(String fileName, Map<String, Object[]> data, String tableTitle) {
        try {
            FileInputStream fis = new FileInputStream(new File(fileName));
            Workbook workbook = new XSSFWorkbook(fis);
            Sheet sheet = workbook.getSheetAt(0);
            
            int lastRowNum = findLastRowOfData(sheet);
            int startRow = lastRowNum + 3;
            createTable(workbook, sheet, data, tableTitle, startRow);
            
            try (FileOutputStream fileOut = new FileOutputStream(fileName)) {
                workbook.write(fileOut);
            }
            
            fis.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private int findLastRowOfData(Sheet sheet) {
        int lastRowNum = sheet.getLastRowNum();
        for (int i = lastRowNum; i >= 0; i--) {
            Row row = sheet.getRow(i);
            if (row != null) {
                Cell cell = row.getCell(0);
                if (cell != null && !isCellEmpty(cell)) {
                    return i;
                }
            }
        }
        return 0;
    }
    
    private boolean isCellEmpty(Cell cell) {
        if (cell.getCellType() == CellType.BLANK) return true;
        if (cell.getCellType() == CellType.STRING && cell.getStringCellValue().trim().isEmpty()) return true;
        return false;
    }
    
    private void setupColumnWidths(Sheet sheet) {
        sheet.setColumnWidth(0, 185 * 32); // A
        sheet.setColumnWidth(1, 185 * 32); // B
        sheet.setColumnWidth(2, 140 * 32); // C
        sheet.setColumnWidth(3, 131 * 32); // D
        sheet.setColumnWidth(4, 176 * 32); // E
        sheet.setColumnWidth(5, 208 * 32); // F
        sheet.setColumnWidth(6, 185 * 32); // G
        sheet.setColumnWidth(7, 118 * 32); // H
        sheet.setColumnWidth(8, 152 * 32); // I
        sheet.setColumnWidth(9, 118 * 32); // J
    }
    
    private void createTable(Workbook workbook, Sheet sheet, Map<String, Object[]> data, String tableTitle, int startRow) {
        // Create cell styles
        CellStyle headerStyle = createHeaderStyle(workbook, LIGHT_GREEN, true);
        CellStyle itemCountStyle = createHeaderStyle(workbook, LIGHT_BLUE, true);
        CellStyle valueStyle = createHeaderStyle(workbook, LIGHT_GREEN, true);
        CellStyle passStyle = createStatusStyle(workbook, PASS_GREEN, false);
        CellStyle failStyle = createStatusStyle(workbook, FAIL_RED, true);
        CellStyle normalStyle = createNormalStyle(workbook, true);  // centered
        CellStyle errorColumnStyle = createNormalStyle(workbook, false);  // left-aligned
        CellStyle columnHeaderStyle = createColumnHeaderStyle(workbook);
        
        // Create title row
        Row titleRow = sheet.createRow(startRow);
        Cell titleCell = titleRow.createCell(0);
        titleCell.setCellValue(tableTitle);
        titleCell.setCellStyle(headerStyle);
        
        // Create header row with merged cells
        Row headerRow = sheet.createRow(startRow + 1);
        
        // Item Count section (merged B2:D2)
        Cell itemCountCell = headerRow.createCell(1);
        itemCountCell.setCellValue("Item Count");
        itemCountCell.setCellStyle(itemCountStyle);
        sheet.addMergedRegion(new CellRangeAddress(startRow + 1, startRow + 1, 1, 3));
        
        // Value cell
        Cell valueCell = headerRow.createCell(4);
        valueCell.setCellValue("Value");
        valueCell.setCellStyle(valueStyle);
        
        // Quantity section (merged F2:H2)
        Cell quantityCell = headerRow.createCell(5);
        quantityCell.setCellValue("Quantity");
        quantityCell.setCellStyle(itemCountStyle);
        sheet.addMergedRegion(new CellRangeAddress(startRow + 1, startRow + 1, 5, 7));
        
        // Other error section (merged I2:J2)
        Cell errorCell = headerRow.createCell(8);
        errorCell.setCellValue("Other error");
        errorCell.setCellStyle(valueStyle);
        sheet.addMergedRegion(new CellRangeAddress(startRow + 1, startRow + 1, 8, 9));
        
        // Create column headers
        Row columnHeaderRow = sheet.createRow(startRow + 2);
        String[] headers = {"ID", "Expected entries", "Actual entries", "Pass/Fail",
                          "Expected Total Value", "Expected Quantity", "Actual Quantity",
                          "Pass/Fail", "Error Details", "Pass/Fail"};
        for (int i = 0; i < headers.length; i++) {
            Cell cell = columnHeaderRow.createCell(i);
            cell.setCellValue(headers[i]);
            cell.setCellStyle(columnHeaderStyle);
        }
        
        // Add data rows
        int rowNum = startRow + 3;
        int lastDataRow = rowNum + data.size() - 1;
        
        for (Map.Entry<String, Object[]> entry : data.entrySet()) {
            Row row = sheet.createRow(rowNum++);
            Object[] rowData = entry.getValue();
            
            for (int i = 0; i < rowData.length; i++) {
                Cell cell = row.createCell(i);
                
                if (rowData[i] instanceof Number) {
                    cell.setCellValue(((Number) rowData[i]).doubleValue());
                    cell.setCellStyle(normalStyle);
                } else {
                    String value = rowData[i].toString();
                    cell.setCellValue(value);
                    
                    if (value.equals("Pass") || value.equals("Fail")) {
                        cell.setCellStyle(value.equals("Pass") ? passStyle : failStyle);
                    } else if (i == 8) { // Error Details column
                        cell.setCellStyle(errorColumnStyle);
                    } else {
                        cell.setCellStyle(normalStyle);
                    }
                }
            }
        }
        
        // Add table borders
        addTableBorders(sheet, startRow, lastDataRow, 0, 9);
    }
    
    private void addTableBorders(Sheet sheet, int startRow, int endRow, int startCol, int endCol) {
        for (int rowNum = startRow; rowNum <= endRow; rowNum++) {
            Row row = sheet.getRow(rowNum);
            if (row == null) continue;
            
            for (int colNum = startCol; colNum <= endCol; colNum++) {
                Cell cell = row.getCell(colNum);
                if (cell == null) {
                    cell = row.createCell(colNum);
                }
                CellStyle style = cell.getCellStyle();
                if (style == null) {
                    style = sheet.getWorkbook().createCellStyle();
                }
                style.setBorderTop(BorderStyle.THIN);
                style.setBorderRight(BorderStyle.THIN);
                style.setBorderBottom(BorderStyle.THIN);
                style.setBorderLeft(BorderStyle.THIN);
                cell.setCellStyle(style);
            }
        }
    }
    
    private CellStyle createHeaderStyle(Workbook workbook, IndexedColors color, boolean bold) {
        CellStyle style = workbook.createCellStyle();
        style.setFillForegroundColor(color.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setVerticalAlignment(VerticalAlignment.CENTER);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        
        Font font = workbook.createFont();
        font.setBold(bold);
        style.setFont(font);
        
        return style;
    }
    
    private CellStyle createStatusStyle(Workbook workbook, IndexedColors color, boolean whiteFont) {
        CellStyle style = workbook.createCellStyle();
        style.setFillForegroundColor(color.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        
        Font font = workbook.createFont();
        if (whiteFont) {
            font.setColor(IndexedColors.WHITE.getIndex());
        }
        style.setFont(font);
        
        return style;
    }
    
    private CellStyle createNormalStyle(Workbook workbook, boolean centered) {
        CellStyle style = workbook.createCellStyle();
        style.setAlignment(centered ? HorizontalAlignment.CENTER : HorizontalAlignment.LEFT);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        return style;
    }
    
    private CellStyle createColumnHeaderStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        
        Font font = workbook.createFont();
        font.setBold(true);
        style.setFont(font);
        
        return style;
    }
}